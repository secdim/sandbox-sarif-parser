{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/CodeInjection",
              "name": "CodeInjection",
              "shortDescription": {
                "text": "Code Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA secure code injection attack occurs when the attacker exploits an existing input processing vulnerability, passing special characters and code directly to a web-based application or site. The code is then executed, potentially granting the user system access to export sensitive data, to install malware, or even to move laterally and to exploit other systems in the trusted internal network environment. While code injection attacks can take place in several ways, the common factor is allowing the user to submit executable code to the application. The most common forms of code injection are SQL injection (server side) and cross-site scripting (XSS) (client side).\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Apply least privilege principle (for example, limit users to read only wherever possible).\n- Avoid passing raw user input directly to functions; use parameterized queries to extract data first.\n- Sanitize user input strings of special characters such as ?, &, /, <, >, and quotation marks.\n- Use whitelisting of known good values.\n- Validate user input against expected response types.\n- Escape shell commands with functions such as shlex for Python, or escapeshellarg for PHP.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities so these cannot be exploited by code injection.\n- Educate all team members on safe data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "CodeInjection",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/spectralDNS/shenfun/commit/16475f2baf898134032dbdd155dd0a563312eff0?diff=split#diff-fb6da554a7c1e9794c48fc606ab31338fabdcc929700fc2e15d28570af157e58L-1",
                    "lines": [
                      {
                        "line": "assert isinstance(eval(sys.argv[-2]), int)\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "assert isinstance(int(sys.argv[-2]), int)\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nextml/NEXT/commit/b0b770405772329dac83ddfdd870ffbbd6a33c4a?diff=split#diff-98933f824249bbc1f6ec89f094e9077caeb5921ae009aa42feb4d2b8d90f7ccfL-1",
                    "lines": [
                      {
                        "line": "        true_values ={1, '1', 'True', 'true'}\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "        zip_true = False\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if request.args.get('zip'):\n",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            try:\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                zip_true = eval(request.args.get('zip'))\n",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            except:\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                pass\n",
                        "lineNumber": 92,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if 'zip' in request.args.keys():\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "            zip_true = True if request.args.get('zip') in true_values else False\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        csv = False\n",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if 'csv' in request.args.keys():\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "            csv = True if request.args.get('csv') in true_values else False\n",
                        "lineNumber": 93,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/naftaliharris/tauthon/commit/4ce126b887212da704b2fe4cf7a22322b48d45bd?diff=split#diff-b989b2f4ba160af991a115642288da4f6cc1bc6e98ead4bf36cf2b8cc235a41fL-1",
                    "lines": [
                      {
                        "line": "\tyear = eval(sys.argv[1])\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    year = int(sys.argv[1])\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "else:\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tyear = input('In which year were you born? ')\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "if year in range(100):\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprint 'I\\'ll assume that by', year,\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    year = year + 1900\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print 'you mean', year, 'and not the early Christian era'\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "elif year not in range(1850, 2000):\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprint 'It\\'s hard to believe you were born in', year\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "#\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "if sys.argv[2:]:\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tmonth = eval(sys.argv[2])\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    month = int(sys.argv[2])\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "else:\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tmonth = input('And in which month? (1-12) ')\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "if month not in range(1, 13):\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print 'There is no month numbered', month\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "#\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "if sys.argv[3:]:\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tday = eval(sys.argv[3])\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    day = int(sys.argv[3])\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 69,
                "cwe": [
                  "CWE-94"
                ]
              }
            },
            {
              "id": "python/Sqli",
              "name": "Sqli",
              "shortDescription": {
                "text": "SQL Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nIn an SQL injection attack, the user can submit an SQL query directly to the database, gaining access without providing appropriate credentials. Attackers can then view, export, modify, and delete confidential information; change passwords and other authentication information; and possibly gain access to other systems within the network. This is one of the most commonly exploited categories of vulnerability, but can largely be avoided through good coding practices.\n\n## Best practices for prevention\n* Avoid passing user-entered parameters directly to the SQL server.\n* Avoid using string concatenation to build SQL queries from user-entered parameters.\n* When coding, define SQL code first, then pass in parameters. Use prepared statements with parameterized queries. Examples include `SqlCommand()` in .NET and `bindParam()` in PHP.\n* Use strong typing for all parameters so unexpected user data will be rejected.\n* Where direct user input cannot be avoided for performance reasons, validate input against a very strict allowlist of permitted characters, avoiding special characters such as `? & / < > ; - ' \" \\` and spaces. Use a vendor-supplied escaping routine if possible.\n* Develop your application in an environment and/or using libraries that provide protection against SQL injection.\n* Harden your entire environment around a least-privilege model, ideally with isolated accounts with privileges only for particular tasks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Sqli",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/nttdots/go-dots/commit/38d1493d11c3a764136c953237233fd16a3e3dc9?diff=split#diff-c7737ee0a3441787e4bcee78bd8ab548aa068c1d16a2632ecf141d9f405d0105L-1",
                    "lines": [
                      {
                        "line": "cur.execute(\"select type, capacity from blocker where id=%d\" % i)\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cur.execute(\"select type, capacity from blocker where id=%s\", (i,))\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/geopython/pywps/commit/a8aa61f85ddc2b3eff6d1fe2c61801b1746007d6?diff=split#diff-dc4ab5f48b32a1a0fe5fbfac4dec3ba67361f27b7a8a67c78464629c8220ae35L-1",
                    "lines": [
                      {
                        "line": "    WHERE uuid = '{uuid}'\n",
                        "lineNumber": 281,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\"\"\".format(\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    uuid=uuid\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 284,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    WHERE uuid = ?\n",
                        "lineNumber": 277,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 278,
                        "lineChange": "added"
                      },
                      {
                        "line": "cur = conn.cursor()\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "cur.execute(insert)\n",
                        "lineNumber": 286,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cur.execute(insert, (str(uuid)))\n",
                        "lineNumber": 280,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Karaage-Cluster/karaage/commit/9f34c6b21538046fafa081da03b5765f78a8b038?diff=split#diff-bd494c70c6111dfcdf5ad33f16e1cc3170a88f7a8713497ef6166493574a8219L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Custom SQL as need to get users that were removed from project too\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cursor = connection.cursor()\n",
                        "lineNumber": 248,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    sql = \"SELECT user_id from cpu_job where project_id = '%s' and `machine_id` IN %s AND `date` >= '%s' AND `date` <= '%s' GROUP BY user_id\" % (str(project.pid), mc_ids, start_str, end_str)\n",
                        "lineNumber": 249,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cursor.execute(sql)\n",
                        "lineNumber": 250,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    rows = list(cursor.fetchall())\n",
                        "lineNumber": 251,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cursor.close()\n",
                        "lineNumber": 252,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    for uid in rows:\n",
                        "lineNumber": 254,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        u = UserAccount.objects.get(id=uid[0]).user\n",
                        "lineNumber": 255,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    rows = CPUJob.objects.filter(\n",
                        "lineNumber": 244,
                        "lineChange": "added"
                      },
                      {
                        "line": "            project=project,\n",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "            machine__category=machine_category,\n",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "            date__range=(start_str, end_str)\n",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "            ).values('user').annotate().order_by('user')\n",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 249,
                        "lineChange": "added"
                      },
                      {
                        "line": "    for row in rows:\n",
                        "lineNumber": 250,
                        "lineChange": "added"
                      },
                      {
                        "line": "        u = UserAccount.objects.get(id=row['user']).user\n",
                        "lineNumber": 251,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 156,
                "cwe": [
                  "CWE-89"
                ]
              }
            },
            {
              "id": "python/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "XSS",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/disoul/dotapick/commit/9af2d0c2c993c9893e1ded55869a0bdf8daf682f?diff=split#diff-c967b1b8020ddb28b0d48b996d98e3d959e49e2f50be7f3b2c5ae787ada96d8fL-1",
                    "lines": [
                      {
                        "line": "return suggestheros.GetSuggestedHeros()\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return jsonify({'hero': suggestheros.GetSuggestedHeros()})\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/using-docker/ci-testing/commit/efdd006e9e14262ee476f74073303bed985d03df?diff=split#diff-515d151a4d9c862bba82a31654a24a25035b96fecb9d8a310559fd791a85708bL-1",
                    "lines": [
                      {
                        "line": "        name = request.form['name']\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        name = html.escape(request.form['name'], quote=True)\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    salted_name = salt + name\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    name_hash = hashlib.sha256(salted_name.encode()).hexdigest()\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    header = '<html><head><title>Identidock</title></head><body>'\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    body = '''<form method=\"POST\">\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Hello <input type=\"text\" name=\"name\" value=\"{0}\">\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "              <input type=\"submit\" value=\"submit\">\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "              </form>\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "              <p>You look like a:\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "              <img src=\"/monster/{1}\"/>\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "              '''.format(name, name_hash)\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    footer = '</body></html>'\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return header + body + footer\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/lordfriend/Albireo/commit/3c52562d141d0d97cc317fe2654689de52726684?diff=split#diff-2292f6e629b924ed84cbd8e19bc9b9ee0be71b9cc5fcb7da86a0558230df5abeL-1",
                    "lines": [
                      {
                        "line": "status = request.args.get('status', Favorites.WATCHING)\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "status = int(request.args.get('status', Favorites.WATCHING))\n",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "if status == 0:\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    status = None\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "return watch_service.my_favorites(current_user.id, status)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 184,
                "cwe": [
                  "CWE-79"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/CodeInjection",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into eval, where it is executed as Python code. This may result in a Code Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is executed as Python code. This may result in a Code Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2)",
              "[eval](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 18,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3c549dd22dfd32674063f8c88243e05821ebe44ec4d0966d5829fc73d69dadf8",
            "1": "5eef81ba.8556dbe6.531bdceb.ae44dbf4.0f10772a.ba14daf2.081ac3f4.b2250968.5eef81ba.a19955a0.531bdceb.f08de77e.0f10772a.7eee6d6e.22a8b49e.b2250968"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 20,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 20,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 834,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "python/Sqli",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into execute, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[execute](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 18,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ca0a587900c40008123e81a8bbead8b25f8df445e77b232f5217453757ddd27c",
            "1": "16691f08.cae4cd67.bb13c5cc.7369b21f.eb21008d.bc9949d2.058fca1d.a52f12f1.ad31a887.cae4cd67.bb13c5cc.f08de77e.af3d5a48.7eee6d6e.22a8b49e.4d202823"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 54,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 13,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 5,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 30,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 18,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 834,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "python/XSS",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into content, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[content](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 25,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "15060f1470869cbcad3fa904defbc8ac4c5ee1b8b10260beff253a723698f037",
            "1": "8a30cfc6.ecc4e7fd.79e62dc9.98569367.b1bd2380.ba14daf2.75d4ed92.f72ce814.63ecb6a3.2467dc13.f05ec40f.f08de77e.b1bd2380.7eee6d6e.22a8b49e.1d19bf80"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 27,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 27,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 24,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 38,
                            "startColumn": 12,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 38,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 33,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 25,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 25,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 834,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Python",
            "files": 1,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}
